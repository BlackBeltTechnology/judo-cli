name: Release

on:
  push:
    branches:
      - main
    tags:
      - 'v*' # Push events to tags like v1.0.0

jobs:
  build:
    name: Build for ${{ matrix.os }}-${{ matrix.arch }}
    runs-on: ubuntu-latest
    strategy:
      matrix:
        os: [windows, linux, darwin]
        arch: [amd64, arm64]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: '1.22' # Use a recent stable Go version

      - name: Build
        run: |
          BINARY_NAME="judo-${{ matrix.os }}-${{ matrix.arch }}"
          if [ "${{ matrix.os }}" = "windows" ]; then
            BINARY_NAME="${BINARY_NAME}.exe"
          fi
          GOOS=${{ matrix.os }} GOARCH=${{ matrix.arch }} go build -o "$BINARY_NAME" ./cmd/judo

      - name: Upload artifact
        uses: actions/upload-artifact@v4
        with:
          name: judo-${{ matrix.os }}-${{ matrix.arch }}
          path: judo-${{ matrix.os }}-${{ matrix.arch }}*

  release:
    name: Create GitHub Release
    runs-on: ubuntu-latest
    if: startsWith(github.ref, 'refs/tags/')
    needs: build
    steps:
      - name: Download all build artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts

      - name: Create archives
        run: |
          mkdir archives
          for dir in artifacts/*/; do
            artifact_name=$(basename "$dir")
            os=$(echo "$artifact_name" | cut -d'-' -f3)
            arch=$(echo "$artifact_name" | cut -d'-' -f4)
            
            # Find the executable within the directory
            executable_path=$(find "$dir" -type f -name "judo-*")
            executable_name=$(basename "$executable_path")

            if [ "$os" = "windows" ]; then
              zip -j "archives/${executable_name}.zip" "$executable_path"
            else
              tar -czf "archives/${executable_name}.tar.gz" -C "$(dirname "$executable_path")" "$executable_name"
            fi
          done

      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          files: archives/*
          tag_name: ${{ github.ref_name }}
          name: Release ${{ github.ref_name }}
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
