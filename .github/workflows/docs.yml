name: Deploy Documentation

on:
  # push:
  #   branches:
  #     - develop
  #     - main
  #   paths:
  #     - "docs/**"
  #     - ".github/workflows/docs.yml"
  workflow_dispatch:

# Sets permissions of the GITHUB_TOKEN to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write

# Allow only one concurrent deployment, skipping runs queued between the run in-progress and latest queued.
# However, do NOT cancel in-progress runs as we want to allow these production deployments to complete.
concurrency:
  group: "pages"
  cancel-in-progress: false

jobs:
  # Build job
  build:
    runs-on: judong
    env:
      RUNNER_TOOL_CACHE: ${{ github.workspace }}/.toolcache
      RUNNER_TEMP: ${{ github.workspace }}/.tmp
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      #      - name: Setup rbenv for documentation
      #        run: |
      #          echo "Setting up rbenv for documentation deployment..."
      #          # Install rbenv from package
      #          sudo apt-get update
      #          sudo apt-get install -y rbenv ruby-build libffi-dev libyaml-dev
      #          # Initialize rbenv and set up plugins directory
      #          eval "$(rbenv init -)"
      #          mkdir -p "$(rbenv root)/plugins"
      #          # Update ruby-build if it exists, otherwise install it
      #          if [ -d "$(rbenv root)/plugins/ruby-build" ]; then
      #              git -C "$(rbenv root)/plugins/ruby-build" pull
      #          else
      #              git clone https://github.com/rbenv/ruby-build.git "$(rbenv root)/plugins/ruby-build"
      #          fi
      #
      #          # Install Ruby 3.2.2 (compatible with Jekyll)
      #          if ! rbenv versions | grep -q "3.2.2"; then
      #              rbenv install 3.2.2 -s
      #          fi
      #          # Set Ruby version for current session only
      #          export RBENV_VERSION=3.2.2
      #
      #          # Install Bundler
      #          gem install bundler
      #          rbenv rehash
      #
      #          echo "Ruby $(ruby -v) and Bundler $(bundle -v) installed via rbenv"

      - name: Setup Pages
        id: pages
        uses: actions/configure-pages@v4

      - name: Define cache dirs
        run: |
          # Choose a stable cache location (adjust as you wish)
          echo "RUNNER_TOOL_CACHE=$HOME/actions/_tool" >> "$GITHUB_ENV"
          echo "RUNNER_TEMP=$HOME/actions/_temp" >> "$GITHUB_ENV"
          echo "AGENT_TOOLSDIRECTORY=$HOME/actions/_tool" >> "$GITHUB_ENV"
          mkdir -p "$HOME/actions/_tool" "$HOME/actions/_temp"

      - name: Bootstrap Ruby into toolcache if missing
        run: |
          set -euo pipefail
          TOOLBASE="${RUNNER_TOOL_CACHE:-$HOME/actions/_tool}"
          DEST="$TOOLBASE/Ruby/3.2.2/x64"
          MARKER="$DEST.complete"
          if [ -f "$MARKER" ]; then
            echo "Ruby 3.2.2 already in toolcache."
            exit 0
          fi

          # Build deps (Ubuntu 22.04)
          sudo apt-get update -y
          sudo apt-get install -y build-essential autoconf bison libssl-dev zlib1g-dev \
            libreadline-dev libyaml-dev libxml2-dev libxslt1-dev \
            libffi-dev libgdbm-dev libncurses5-dev libdb-dev wget ca-certificates

          # Always fetch a fresh ruby-build and use its binary directly
          RB_TMP="$(mktemp -d)"
          git clone --depth=1 https://github.com/rbenv/ruby-build.git "$RB_TMP"
          "$RB_TMP/bin/ruby-build" --version
          "$RB_TMP/bin/ruby-build" --definitions | tail -n +1 | grep -E '^3\.2\.2$' >/dev/null || {
            echo "ruby-build does not list 3.2.2; aborting."; exit 1;
          }

          mkdir -p "$DEST"
          # Optional: prevent parallel installs on a busy runner
          lock=/tmp/ruby-3.2.2.lock
          (
            flock 9
            "$RB_TMP/bin/ruby-build" 3.2.2 "$DEST"
            touch "$MARKER"
          ) 9>"$lock"

          echo "Installed Ruby to $DEST"

      - name: Set up Ruby (use preinstalled)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2.2
          bundler: "2.7.1"
          bundler-cache: false
          self-hosted: true

      - name: Bundler path (optional)
        run: bundle config set path ".bundle"

      - name: Build documentation with build-docs.sh
        run: |
          cd docs
          chmod +x build-docs.sh
          ./build-docs.sh --clean

          # Copy install scripts to the built site
          mkdir -p _site
          cp ../scripts/install.sh _site/
          cp ../scripts/install.ps1 _site/

      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          path: docs/_site

  # Deployment job
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: judong
    needs: build
    steps:
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
