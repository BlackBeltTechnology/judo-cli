name: Build and Test

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - develop

jobs:
  test:
    name: Test
    runs-on: judong
    env:
      RUNNER_TOOL_CACHE: ${{ github.workspace }}/.toolcache
      RUNNER_TEMP: ${{ github.workspace }}/.tmp
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"

      - name: Run tests
        run: go test -v ./...

      - name: Run go vet
        run: go vet ./...

      - name: Run go fmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

      #      - name: Setup rbenv for documentation
      #        if: always()
      #        run: |
      #          if [ -f "docs/build-docs.sh" ]; then
      #            echo "Setting up rbenv for documentation..."
      #            # Install rbenv from package
      #            sudo apt-get update
      #            sudo apt-get install -y rbenv ruby-build libffi-dev libyaml-dev
      #
      #            # Initialize rbenv and set up plugins directory
      #            eval "$(rbenv init -)"
      #            mkdir -p "$(rbenv root)/plugins"
      #            # Update ruby-build if it exists, otherwise install it
      #            if [ -d "$(rbenv root)/plugins/ruby-build" ]; then
      #                git -C "$(rbenv root)/plugins/ruby-build" pull
      #            else
      #                git clone https://github.com/rbenv/ruby-build.git "$(rbenv root)/plugins/ruby-build"
      #            fi
      #            # Install Ruby 3.2.2 (or latest stable compatible with Jekyll)
      #            if ! rbenv versions | grep -q "3.2.2"; then
      #                rbenv install 3.2.2 -s
      #            fi
      #            # Set Ruby version for current session only
      #            export RBENV_VERSION=3.2.2
      #
      #            # Install Bundler
      #            gem install bundler
      #            rbenv rehash
      #
      #            echo "Ruby $(ruby -v) and Bundler $(bundle -v) installed via rbenv"
      #          fi

      - name: Define cache dirs
        run: |
          # Choose a stable cache location (adjust as you wish)
          echo "RUNNER_TOOL_CACHE=$HOME/actions/_tool" >> "$GITHUB_ENV"
          echo "RUNNER_TEMP=$HOME/actions/_temp" >> "$GITHUB_ENV"
          echo "AGENT_TOOLSDIRECTORY=$HOME/actions/_tool" >> "$GITHUB_ENV"
          mkdir -p "$HOME/actions/_tool" "$HOME/actions/_temp"

      - name: Bootstrap Ruby into toolcache if missing
        run: |
          set -euo pipefail
          TOOLBASE="${RUNNER_TOOL_CACHE:-$HOME/actions/_tool}"
          DEST="$TOOLBASE/Ruby/3.2.2/x64"
          MARKER="$DEST.complete"
          if [ -f "$MARKER" ]; then
            echo "Ruby 3.2.2 already in toolcache."
            exit 0
          fi

          # Build deps (Ubuntu 22.04)
          sudo apt-get update -y
          sudo apt-get install -y build-essential autoconf bison libssl-dev zlib1g-dev \
            libreadline-dev libyaml-dev libxml2-dev libxslt1-dev \
            libffi-dev libgdbm-dev libncurses5-dev libdb-dev wget ca-certificates

          # Always fetch a fresh ruby-build and use its binary directly
          RB_TMP="$(mktemp -d)"
          git clone --depth=1 https://github.com/rbenv/ruby-build.git "$RB_TMP"
          "$RB_TMP/bin/ruby-build" --version
          "$RB_TMP/bin/ruby-build" --definitions | tail -n +1 | grep -E '^3\.2\.2$' >/dev/null || {
            echo "ruby-build does not list 3.2.2; aborting."; exit 1;
          }

          mkdir -p "$DEST"
          # Optional: prevent parallel installs on a busy runner
          lock=/tmp/ruby-3.2.2.lock
          (
            flock 9
            "$RB_TMP/bin/ruby-build" 3.2.2 "$DEST"
            touch "$MARKER"
          ) 9>"$lock"

          echo "Installed Ruby to $DEST"

      - name: Set up Ruby (use preinstalled)
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: 3.2.2
          bundler: "2.7.1"
          bundler-cache: false
          self-hosted: true

      - name: Bundler path (optional)
        run: bundle config set path ".bundle"

      - name: Validate documentation build
        run: |
          if [ -f "docs/build-docs.sh" ]; then
            echo "Validating documentation build..."
            cd docs
            chmod +x build-docs.sh
            ./build-docs.sh --clean
            echo "Documentation build validation successful"
          else
            echo "Warning: docs/build-docs.sh not found, skipping documentation validation"
          fi

  build-snapshot:
    name: Build Snapshot (Develop)
    runs-on: judong
    if: github.ref == 'refs/heads/develop'
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"

      - name: Get base version
        id: version
        run: |
          chmod +x scripts/version.sh
          BASE_VERSION=$(scripts/version.sh get)
          echo "base_version=${BASE_VERSION}" >> $GITHUB_OUTPUT
          echo "GORELEASER_CURRENT_TAG=v${BASE_VERSION}" >> $GITHUB_ENV

      - name: Run GoReleaser (Snapshot Release)
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --snapshot --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get snapshot version and create release
        id: create-release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const fs = require('fs');

            // Generate snapshot version
            const baseVersion = '${{ steps.version.outputs.base_version }}';
            const timestamp = new Date().toISOString().replace(/[-:T]/g, '').substring(0, 14);
            const snapshotVersion = `${baseVersion}-snapshot-${timestamp}`;
            const tagName = `v${snapshotVersion}`;

            console.log(`Creating snapshot release: ${tagName}`);

            // Create the tag and release
            const release = await github.rest.repos.createRelease({
              owner,
              repo,
              tag_name: tagName,
              name: `JUDO CLI ${tagName} (Development Snapshot)`,
              body: `**⚠️ Development Snapshot Build**

            This is an automated development build from the \`develop\` branch.

            **Build Info:**
            - Version: ${tagName}
            - Branch: develop
            - Commit: ${{ github.sha }}
            - Built: ${new Date().toISOString()}

            **⚠️ This is a pre-release version intended for testing and development only.**

            **Installation:**
            Download the appropriate binary for your platform from the assets below.`,
              draft: false,
              prerelease: true
            });

            // Store release info for later steps
            core.setOutput('release_id', release.data.id);
            core.setOutput('tag_name', tagName);
            core.setOutput('snapshot_version', snapshotVersion);

      - name: Upload binaries to release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const fs = require('fs');
            const path = require('path');
            const releaseId = '${{ steps.create-release.outputs.release_id }}';

            // Find all files in dist directory
            const distDir = './dist';
            const files = fs.readdirSync(distDir);

            for (const file of files) {
              if (file.endsWith('.tar.gz') || file.endsWith('.zip') || file === 'checksums.txt') {
                const filePath = path.join(distDir, file);
                const fileContent = fs.readFileSync(filePath);

                console.log(`Uploading ${file}...`);

                await github.rest.repos.uploadReleaseAsset({
                  owner,
                  repo,
                  release_id: releaseId,
                  name: file,
                  data: fileContent
                });

                console.log(`✓ Uploaded ${file}`);
              }
            }

      - name: Upload snapshot artifacts
        uses: actions/upload-artifact@v4
        with:
          name: judo-snapshot-${{ steps.create-release.outputs.snapshot_version }}
          path: |
            dist/*.tar.gz
            dist/*.zip
            dist/checksums.txt

      - name: Cleanup old develop releases
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;

            // Get all releases
            const releases = await github.rest.repos.listReleases({
              owner,
              repo,
              per_page: 100
            });

            // Filter snapshot releases (contain 'snapshot' in tag name)
            const snapshotReleases = releases.data.filter(release =>
              release.tag_name.includes('snapshot') && release.prerelease
            );

            console.log(`Found ${snapshotReleases.length} snapshot releases`);

            // Sort by creation date (newest first)
            snapshotReleases.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

            // Keep only the latest 3 snapshots, delete the rest
            if (snapshotReleases.length > 3) {
              const toDelete = snapshotReleases.slice(3);

              console.log(`Keeping ${Math.min(3, snapshotReleases.length)} latest snapshots, deleting ${toDelete.length} old ones`);

              for (const release of toDelete) {
                console.log(`Deleting old snapshot release: ${release.tag_name} (created: ${release.created_at})`);
                try {
                  await github.rest.repos.deleteRelease({
                    owner,
                    repo,
                    release_id: release.id
                  });

                  // Also delete the tag
                  await github.rest.git.deleteRef({
                    owner,
                    repo,
                    ref: `tags/${release.tag_name}`
                  });

                  console.log(`Successfully deleted: ${release.tag_name}`);
                } catch (error) {
                  console.log(`Failed to delete release ${release.tag_name}: ${error.message}`);
                }
              }
            } else {
              console.log(`Only ${snapshotReleases.length} snapshot releases found, no cleanup needed`);
            }

  build-master:
    name: Build Master Branch
    runs-on: judong
    if: github.ref == 'refs/heads/master'
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"

      - name: Generate build version
        id: version
        run: |
          chmod +x scripts/version.sh
          BASE_VERSION=$(scripts/version.sh get)
          echo "base_version=${BASE_VERSION}" >> $GITHUB_OUTPUT

      - name: Run GoReleaser (Build only)
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: build --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: judo-build-${{ steps.version.outputs.base_version }}
          path: |
            dist/judo_*
