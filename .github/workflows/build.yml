name: Build and Test

on:
  push:
    branches:
      - master
      - develop
  pull_request:
    branches:
      - develop

jobs:
  test:
    name: Test
    runs-on: judong
    env:
      RUNNER_TOOL_CACHE: ${{ github.workspace }}/.toolcache
      RUNNER_TEMP: ${{ github.workspace }}/.tmp
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"

      - name: Run tests
        run: go test -v ./...

      - name: Run go vet
        run: go vet ./...

      - name: Run go fmt check
        run: |
          if [ "$(gofmt -s -l . | wc -l)" -gt 0 ]; then
            echo "The following files are not formatted:"
            gofmt -s -l .
            exit 1
          fi

  build-snapshot:
    name: Build Snapshot (Develop)
    runs-on: judong
    if: github.ref == 'refs/heads/develop'
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"

      - name: Get base version
        id: version
        run: |
          chmod +x scripts/version.sh
          BASE_VERSION=$(scripts/version.sh get)
          echo "base_version=${BASE_VERSION}" >> $GITHUB_OUTPUT
          echo "GORELEASER_CURRENT_TAG=v${BASE_VERSION}" >> $GITHUB_ENV

      - name: Generate release notes using git log
        run: |
          set -e
          BASE_VERSION="${{ steps.version.outputs.base_version }}"
          TAG_NAME="v${BASE_VERSION}"
          echo "Generating release notes for version: $BASE_VERSION"

          # Get previous RELEASE tag (not snapshot or current tag) for changelog range
          # List all tags, filter out snapshots and current tag, sort by version, and get the latest release
          PREVIOUS_TAG=$(git tag -l "v*" | grep -E "^v[0-9]+\\.[0-9]+\\.[0-9]+$" | grep -v "snapshot" | grep -v "^$TAG_NAME$" | sort -V | tail -1)

          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "Generating changelog from last release $PREVIOUS_TAG to current commit"
            git log --oneline --no-merges --decorate "$PREVIOUS_TAG..HEAD" > RELEASE_NOTES.md
          else
            echo "No previous release tag found, generating recent changelog"
            git log --oneline --no-merges --decorate -n 20 > RELEASE_NOTES.md
          fi

          # Add header
          echo "# Development Snapshot - $TAG_NAME" > temp_notes.md
          echo "" >> temp_notes.md
          echo "**Build Date**: $(date +%Y-%m-%d)" >> temp_notes.md
          echo "**Branch**: develop" >> temp_notes.md
          echo "" >> temp_notes.md
          echo "## Recent Changes" >> temp_notes.md
          echo "" >> temp_notes.md
          cat RELEASE_NOTES.md >> temp_notes.md
          mv temp_notes.md RELEASE_NOTES.md

          echo "✅ RELEASE_NOTES.md generated successfully"
          echo "Release notes content preview:"
          head -5 RELEASE_NOTES.md

      - name: Run GoReleaser (Snapshot Release)
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: release --snapshot --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Get snapshot version and create release
        id: create-release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const fs = require('fs');

            // Generate snapshot version
            const baseVersion = '${{ steps.version.outputs.base_version }}';
            const timestamp = new Date().toISOString().replace(/[-:T]/g, '').substring(0, 14);
            const snapshotVersion = `${baseVersion}-snapshot-${timestamp}`;
            const tagName = `v${snapshotVersion}`;

            console.log(`Creating snapshot release: ${tagName}`);

            // Create the tag and release
            const release = await github.rest.repos.createRelease({
              owner,
              repo,
              tag_name: tagName,
              name: `JUDO CLI ${tagName} (Development Snapshot)`,
              body: `**⚠️ Development Snapshot Build**

            This is an automated development build from the \`develop\` branch.

            **Build Info:**
            - Version: ${tagName}
            - Branch: develop
            - Commit: ${{ github.sha }}
            - Built: ${new Date().toISOString()}

            **⚠️ This is a pre-release version intended for testing and development only.**

            **Installation:**
            Download the appropriate binary for your platform from the assets below.`,
              draft: false,
              prerelease: true
            });

            // Store release info for later steps
            core.setOutput('release_id', release.data.id);
            core.setOutput('tag_name', tagName);
            core.setOutput('snapshot_version', snapshotVersion);

      - name: Upload binaries to release
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;
            const fs = require('fs');
            const path = require('path');
            const releaseId = '${{ steps.create-release.outputs.release_id }}';

            // Find all files in dist directory
            const distDir = './dist';
            const files = fs.readdirSync(distDir);

            for (const file of files) {
              if (file.endsWith('.tar.gz') || file.endsWith('.zip') || file === 'checksums.txt') {
                const filePath = path.join(distDir, file);
                const fileContent = fs.readFileSync(filePath);

                console.log(`Uploading ${file}...`);

                await github.rest.repos.uploadReleaseAsset({
                  owner,
                  repo,
                  release_id: releaseId,
                  name: file,
                  data: fileContent
                });

                console.log(`✓ Uploaded ${file}`);
              }
            }

      - name: Upload snapshot artifacts
        uses: actions/upload-artifact@v4
        with:
          name: judo-snapshot-${{ steps.create-release.outputs.snapshot_version }}
          path: |
            dist/*.tar.gz
            dist/*.zip
            dist/checksums.txt
            RELEASE_NOTES.md

      - name: Cleanup old develop releases
        uses: actions/github-script@v7
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}
          script: |
            const { owner, repo } = context.repo;

            // Get all releases
            const releases = await github.rest.repos.listReleases({
              owner,
              repo,
              per_page: 100
            });

            // Filter snapshot releases (contain 'snapshot' in tag name)
            const snapshotReleases = releases.data.filter(release =>
              release.tag_name.includes('snapshot') && release.prerelease
            );

            console.log(`Found ${snapshotReleases.length} snapshot releases`);

            // Sort by creation date (newest first)
            snapshotReleases.sort((a, b) => new Date(b.created_at) - new Date(a.created_at));

            // Keep only the latest 3 snapshots, delete the rest
            if (snapshotReleases.length > 3) {
              const toDelete = snapshotReleases.slice(3);

              console.log(`Keeping ${Math.min(3, snapshotReleases.length)} latest snapshots, deleting ${toDelete.length} old ones`);

              for (const release of toDelete) {
                console.log(`Deleting old snapshot release: ${release.tag_name} (created: ${release.created_at})`);
                try {
                  await github.rest.repos.deleteRelease({
                    owner,
                    repo,
                    release_id: release.id
                  });

                  // Also delete the tag
                  await github.rest.git.deleteRef({
                    owner,
                    repo,
                    ref: `tags/${release.tag_name}`
                  });

                  console.log(`Successfully deleted: ${release.tag_name}`);
                } catch (error) {
                  console.log(`Failed to delete release ${release.tag_name}: ${error.message}`);
                }
              }
            } else {
              console.log(`Only ${snapshotReleases.length} snapshot releases found, no cleanup needed`);
            }

  build-master:
    name: Build Master Branch
    runs-on: judong
    if: github.ref == 'refs/heads/master'
    needs: test
    steps:
      - name: Checkout code with tags
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          fetch-tags: true

      - name: Set up Go
        uses: actions/setup-go@v5
        with:
          go-version: "1.25"

      - name: Fetch all tags explicitly
        run: git fetch --tags --force

      - name: Generate build version and create tag
        id: version
        run: |
          set -e
          chmod +x scripts/version.sh
          BASE_VERSION=$(scripts/version.sh get)
          echo "base_version=${BASE_VERSION}" >> $GITHUB_OUTPUT

          # Create the release tag locally for GoReleaser validation
          TAG_NAME="v${BASE_VERSION}"
          echo "Creating local tag: $TAG_NAME"

          # Check if tag already exists locally or remotely
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            echo "Tag $TAG_NAME already exists locally"
            # Verify it points to the current commit
            TAG_COMMIT=$(git rev-parse "$TAG_NAME")
            CURRENT_COMMIT=$(git rev-parse HEAD)
            if [[ "$TAG_COMMIT" != "$CURRENT_COMMIT" ]]; then
              echo "::error::Tag $TAG_NAME exists but points to different commit ($TAG_COMMIT vs $CURRENT_COMMIT)"
              exit 1
            fi
          else
            # Create the tag locally
            git tag -a "$TAG_NAME" -m "Release version ${BASE_VERSION}"
            echo "Created local tag: $TAG_NAME"
          fi

          echo "GORELEASER_CURRENT_TAG=${TAG_NAME}" >> $GITHUB_ENV

      - name: Run GoReleaser (Build artifacts)
        uses: goreleaser/goreleaser-action@v6
        with:
          distribution: goreleaser
          version: "~> v2"
          args: build --clean
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Generate release notes using git log
        run: |
          set -e
          BASE_VERSION="${{ steps.version.outputs.base_version }}"
          TAG_NAME="v${BASE_VERSION}"
          echo "Generating release notes for version: $BASE_VERSION"

          # Get previous RELEASE tag (not snapshot or current tag) for changelog range
          # List all tags, filter out snapshots and current tag, sort by version, and get the latest release
          PREVIOUS_TAG=$(git tag -l "v*" | grep -E "^v[0-9]+\\.[0-9]+\\.[0-9]+$" | grep -v "snapshot" | grep -v "^$TAG_NAME$" | sort -V | tail -1)

          if [[ -n "$PREVIOUS_TAG" ]]; then
            echo "Generating changelog from last release $PREVIOUS_TAG to current commit"
            git log --oneline --no-merges --decorate "$PREVIOUS_TAG..HEAD" > RELEASE_NOTES.md
          else
            echo "No previous release tag found, generating recent changelog"
            git log --oneline --no-merges --decorate -n 20 > RELEASE_NOTES.md
          fi

          # Add header
          echo "# Development Snapshot - $TAG_NAME" > temp_notes.md
          echo "" >> temp_notes.md
          echo "**Build Date**: $(date +%Y-%m-%d)" >> temp_notes.md
          echo "**Branch**: develop" >> temp_notes.md
          echo "" >> temp_notes.md
          echo "## Recent Changes" >> temp_notes.md
          echo "" >> temp_notes.md
          cat RELEASE_NOTES.md >> temp_notes.md
          mv temp_notes.md RELEASE_NOTES.md

          echo "✅ RELEASE_NOTES.md generated successfully"
          echo "Release notes content preview:"
          head -5 RELEASE_NOTES.md

      - name: Upload build artifacts
        uses: actions/upload-artifact@v4
        with:
          name: judo-build-${{ steps.version.outputs.base_version }}
          path: |
            dist/*.tar.gz
            dist/*.zip
            dist/checksums.txt
            dist/homebrew/*.rb
            RELEASE_NOTES.md

      - name: Cleanup local tag if build failed
        if: failure()
        run: |
          set -e
          BASE_VERSION="${{ steps.version.outputs.base_version }}"
          TAG_NAME="v${BASE_VERSION}"

          # Only delete if it's a local tag (not pushed to remote)
          if git rev-parse "$TAG_NAME" >/dev/null 2>&1; then
            # Check if tag exists on remote
            if ! git ls-remote --tags origin "refs/tags/$TAG_NAME" | grep -q "$TAG_NAME"; then
              echo "Deleting local tag $TAG_NAME (build failed)"
              git tag -d "$TAG_NAME"
            else
              echo "Tag $TAG_NAME exists on remote, skipping cleanup"
            fi
          fi
